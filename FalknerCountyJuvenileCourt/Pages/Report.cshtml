@page
@model ReportModel
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   
    <div style="display: flex; flex-direction: row;">
        <!-- Graph 1 -->
        <div style="width: 400px; height: 400px; margin-right: 70px; margin-bottom: 40px;">
            <h1>Person arrested by Race</h1>
            <canvas id="ArrestedRaceBarChart" width="400" height="400"></canvas>
        </div>
        <!-- Text 1 -->
        <div id="arrestedRaceText" style="flex: 1; font-size: 24px; margin-top: 150px;">
    </div>
    </div>
    <br>
    <div style="display: flex; flex-direction: row;">
        <!-- Graph 2 -->
        <div style="width: 400px; height: 400px; margin-right: 70px; margin-bottom: 85px;">
            <h1>Person arrested by Gender</h1>
            <canvas id="genderPieChart" width="400" height="400"></canvas>
        </div>
        <!-- Text 2 -->
        <div id="genderText" style="flex: 1; font-size: 24px; margin-top: 150px;">
        </div>
    </div>
    <br>
    <div style="display: flex; flex-direction: row;">
        <!-- Graph 3 -->
        <div style="width: 400px; height: 400px; margin-right: 70px; margin-bottom: 60px;">
            <h1>Person Arrested by Age</h1>
            <canvas id="agePieChart" width="400" height="400"></canvas>
        </div>
        <!-- Text 3 -->
        <div id="ageText" style="flex: 1; font-size: 24px; margin-top: 150px;">
        </div>
    </div>
    <br>
    <div style="text-align: center; font-weight:bold; margin-bottom: 40px; margin-top:40px; font-size: 24px;">
        Juvenile Court provides on-call juvenile officers 24/7/365. 
        This officer determines the youthâ€™s placement at the time of arrest given specific factors (risk to the community and mental health). 
        An objective 20th Judicial District Juvenile Court Detention Risk Assessment is used in this process with a release override if needed.
    </div>
    <br>
    <div style="display: flex; flex-direction: row;">
        <!-- Graph 4 -->
        <div style="width: 400px; height: 400px; margin-right: 70px; margin-bottom: 40px;">
            <h1>Intake Decisions</h1>
            <canvas id="IntakeDecisionPieChart" width="400" height="400"></canvas>
        </div>
        <!-- Text 4 -->
         <div id="intakeText" style="flex: 1; font-size: 24px; margin-top: 150px;">
        </div>
    </div>
    <br>
    <div style="display: flex; flex-direction: row;">
        <!-- Graph 5 -->
        <div style="width: 400px; height: 400px; margin-right: 70px; margin-bottom: 130px;">
            <h1>SAVRY Levels for Detained Youth Upon Intake</h1>
            <canvas id="RiskPieChart" width="400" height="400"></canvas>
        </div>
        <!-- Text 5 -->
        <div style= "flex 1; font-size: 24px; margin-top: 150px;">
            <p> High Risk: 28<br>
                Moderate Risk: 14<br>
                Low Risk: 4<br>
                Unknown:: 14
            </p>
        </div>
    </div>
    <br>
    <div style="width: 400px; height: 400px; margin-bottom: 40px;">
        <h1>School Related Arrests</h1>
        <canvas id="SchoolPieChart" width="400" height="400"></canvas>
    </div>
    <br>
    <div style="width: 400px; height: 400px; margin-bottom: 75px;">
        <h1>Prosecutor Filing Decisions</h1>
        <canvas id="FilingDecisionPieChart" width="400" height="400"></canvas>
    </div>
    <br>
    <div style="width: 400px; height: 400px; margin-bottom: 35px;">
        <h1>Admissions by Race</h1>
        <canvas id="adracePieChart" width="400" height="400"></canvas>
    </div>
    <br>
    <div style="width: 400px; height: 400px; margin-bottom: 40px;">
        <h1>Admission by Gender</h1>
        <canvas id="adgenderPieChart" width="400" height="400"></canvas>
    </div>
    <br>
    <div style="width: 400px; height: 400px; margin-bottom: 40px;">
        <h1>Admission by Age</h1>
        <canvas id="adagebarChart" width="400" height="400"></canvas>
    </div>
 
 
<script>
    // Predefined set of colors, use this for every piechart so that color scheme is similar
    var predefinedColors = [
        'rgba(255, 165, 0, 0.8)',   // Orange
        'rgba(0, 0, 255, 0.8)',     // Blue
        'rgba(255, 255, 0, 0.8)',   // Yellow
        'rgba(169, 169, 169, 0.8)', // Grey
        'rgba(0, 128, 0, 0.8)'      // Green
        ];

    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=ArrestedRaceDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            //console.log("Raw response data:", await response.text());
            if (response.ok) {
                var raceData = await response.json();
 
                console.log('Received raceData:', raceData);
 
                var raceLabels = raceData.map(item => item.race);
                var raceValues = raceData.map(item => item.count);

                var arrestedRaceText = document.getElementById('arrestedRaceText');
                arrestedRaceText.innerHTML = raceData.map(item => `${item.race}: ${item.count} (${((item.count / raceData.reduce((acc, curr) => acc + curr.count, 0)) * 100).toFixed(1)}%)`).join('<br>') +
                `<br>Grand Total: ${raceData.reduce((acc, curr) => acc + curr.count, 0)}`;
 
                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(raceLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, raceLabels.length - predefinedColors.length)));
 
                var ctx = document.getElementById('ArrestedRaceBarChart').getContext('2d');
                var racePieChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: raceLabels,
                        datasets: [{
                            label: 'Arrests by race',
                            data: raceValues,
                            backgroundColor: backgroundColors,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
 
        }
    });
    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=GenderDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            //console.log("Raw response data:", await response.text());
            if (response.ok) {
                var genderData = await response.json();
 
                console.log('Received genderData:', genderData);
 
                var genderLabels = genderData.map(item => item.gender);
                var genderValues = genderData.map(item => item.count);

                var genderText = document.getElementById('genderText');
                genderText.innerHTML = genderData.map(item => `${item.gender}: ${item.count} (${((item.count / genderData.reduce((acc, curr) => acc + curr.count, 0)) * 100).toFixed(1)}%)`).join('<br>') +
                `<br>Grand Total: ${genderData.reduce((acc, curr) => acc + curr.count, 0)}`;
 
                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(genderLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, genderLabels.length - predefinedColors.length)));
 
                var ctx = document.getElementById('genderPieChart').getContext('2d');
                var genderPieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: genderLabels,
                        datasets: [{
                            data: genderValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
 
        }
    });

   document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=AgeDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            if (response.ok) {
                var ageData = await response.json();

                console.log('Received ageData:', ageData);

                var ageLabels = ageData.map(item => item.ageGroups);
                var ageValues = ageData.map(item => item.count);

                var ageText = document.getElementById('ageText');
                ageText.innerHTML = ageData.map(item => `${item.ageGroups}: ${item.count} (${((item.count / ageData.reduce((acc, curr) => acc + curr.count, 0)) * 100).toFixed(1)}%)`).join('<br>') +
                `<br>Grand Total: ${ageData.reduce((acc, curr) => acc + curr.count, 0)}`;


                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(ageLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, ageLabels.length - predefinedColors.length)));

                var ctx = document.getElementById('agePieChart').getContext('2d');
                var agePieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: ageLabels,
                        datasets: [{
                            data: ageValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
        }
    });

    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=IntakeDecisionDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            //console.log("Raw response data:", await response.text());
            if (response.ok) {
                var IntakeDecisionData = await response.json();
 
                console.log('Received IntakeDecisionData:', IntakeDecisionData);
 
                var IntakeDecisionLabels = IntakeDecisionData.map(item => item.intakeDecisionCounts);
                var IntakeDecisionValues = IntakeDecisionData.map(item => item.count);

                var intakeText = document.getElementById('intakeText');
                intakeText.innerHTML = IntakeDecisionData.map(item => `${item.intakeDecisionCounts}: ${item.count} (${((item.count / IntakeDecisionData.reduce((acc, curr) => acc + curr.count, 0)) * 100).toFixed(1)}%)`).join('<br>') +
                `<br>Grand Total: ${IntakeDecisionData.reduce((acc, curr) => acc + curr.count, 0)}`;
 
 
                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(IntakeDecisionLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, IntakeDecisionLabels.length - predefinedColors.length)));
 
                var ctx = document.getElementById('IntakeDecisionPieChart').getContext('2d');
                var IntakeDecisionPieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: IntakeDecisionLabels,
                        datasets: [{
                            data: IntakeDecisionValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
 
        }
    });

    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=RiskDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            //console.log("Raw response data:", await response.text());
            if (response.ok) {
                var RiskData = await response.json();
 
                console.log('Received RiskData:', RiskData);
 
                var RiskLabels = RiskData.map(item => item.riskcount);
                var RiskValues = RiskData.map(item => item.count);
 
                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(RiskLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, RiskLabels.length - predefinedColors.length)));
 
                var ctx = document.getElementById('RiskPieChart').getContext('2d');
                var RiskPieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: RiskLabels,
                        datasets: [{
                            data: RiskValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
 
        }
    });
    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=SchoolDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            //console.log("Raw response data:", await response.text());
            if (response.ok) {
                var SchoolData = await response.json();
 
                console.log('Received SchoolData:', SchoolData);
 
                var SchoolLabels = SchoolData.map(item => item.schoolCount);
                var SchoolValues = SchoolData.map(item => item.count);
 
                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(SchoolLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, SchoolLabels.length - predefinedColors.length)));
 
                var ctx = document.getElementById('SchoolPieChart').getContext('2d');
                var SchoolPieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: SchoolLabels,
                        datasets: [{
                            data: SchoolValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
 
        }
    });
    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=FilingDecisionDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            //console.log("Raw response data:", await response.text());
            if (response.ok) {
                var FilingDecisionData = await response.json();
 
                console.log('Received FilingDecisionData:', FilingDecisionData);
 
                var FilingDecisionLabels = FilingDecisionData.map(item => item.filingdecisioncount);
                var FilingDecisionValues = FilingDecisionData.map(item => item.count);
 
                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(FilingDecisionLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, FilingDecisionLabels.length - predefinedColors.length)));
 
                var ctx = document.getElementById('FilingDecisionPieChart').getContext('2d');
                var FilingDecisionPieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: FilingDecisionLabels,
                        datasets: [{
                            data: FilingDecisionValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
 
        }
    });
    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=RaceDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            //console.log("Raw response data:", await response.text());
            if (response.ok) {
                var raceData = await response.json();
 
                console.log('Received raceData:', raceData);
 
                var raceLabels = raceData.map(item => item.race);
                var raceValues = raceData.map(item => item.count);
 
                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(raceLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, raceLabels.length - predefinedColors.length)));
 
                var ctx = document.getElementById('adracePieChart').getContext('2d');
                var racePieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: raceLabels,
                        datasets: [{
                            data: raceValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
 
        }
    });
    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=AdGenderDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            //console.log("Raw response data:", await response.text());
            if (response.ok) {
                var genderData = await response.json();
 
                console.log('Received genderData:', genderData);
 
                var genderLabels = genderData.map(item => item.gender);
                var genderValues = genderData.map(item => item.count);
 
                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(genderLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, genderLabels.length - predefinedColors.length)));
 
                var ctx = document.getElementById('adgenderPieChart').getContext('2d');
                var genderPieChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: genderLabels,
                        datasets: [{
                            data: genderValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
 
        }
    });
    document.addEventListener('DOMContentLoaded', async function () {
        try {
            var response = await fetch('/Report?handler=AdAgeDistributionData', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            if (response.ok) {
                var ageData = await response.json();

                console.log('Received ageData:', ageData);

                var ageLabels = ageData.map(item => item.ageGroups);
                var ageValues = ageData.map(item => item.count);

                // Use predefined colors for the first 5 colors
                var backgroundColors = predefinedColors.slice(0, Math.min(ageLabels.length, predefinedColors.length));
                backgroundColors = backgroundColors.concat(generateRandomColors(Math.max(0, ageLabels.length - predefinedColors.length)));

                var ctx = document.getElementById('adagebarChart').getContext('2d');
                var agePieChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: ageLabels,
                        datasets: [{
                            label: 'Arrests by ages',
                            data: ageValues,
                            backgroundColor: backgroundColors
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'top',
                        }
                    }
                });
            } else {
                console.error("Error fetching data. Status:", response.status);
                console.log("Raw response data:", await response.text());
            }
        } catch (error) {
            console.error("Error fetching or parsing data:", error);
        }
    });
 
    //Generate random colors
    function generateRandomColors(count) {
        var colors = [];
        var letters = '0123456789ABCDEF';
        for (var i = 0; i < count; i++) {
            var color = '#';
            for (var j = 0; j < 6; j++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            colors.push(color);
        }
        return colors;
    }
</script>
